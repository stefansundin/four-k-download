def denary2binary(n):
    bStr = ''
    if n < 0:  raise ValueError, "must be a positive integer"
    if n == 0: return '0000'
    while n > 0:
        bStr = str(n % 2) + bStr
        n = n >> 1
    res = ""
    for i in xrange(0, 4 - len(bStr)):
        res += "0"
    return res + bStr

def dec2hex(n):
    return "%X" % n

def val2dec(s, k):
    return int(s, k)

def decodeVal16(s):
    res = []
    for v in s:
        res.append(str(denary2binary(val2dec(v, 16))))
    return res

def decrypt(Params):
    UN = Params['un']
    KEY1 = int(Params['key1'])
    KEY2 = int(Params['key2'])
    reg1 = [int(v) for v in list("".join(decodeVal16(UN)))]
    
    reg3 = 0
    reg6 = []
    key1 = KEY1
    key2 = KEY2
    while (reg3 < 384): 
        key1 = (key1 * 11 + 77213) % 81371
        key2 = (key2 * 17 + 92717) % 192811
        reg6.append(((key1 + key2) % 128))
        reg3 += 1

    reg3 = 256;
    while (reg3 >= 0):
        reg5 = reg6[reg3]
        reg4 = reg3 % 128
        reg8 = reg1[reg5]
        reg1[reg5] = reg1[reg4]
        reg1[reg4] = reg8
        reg3 -= 1

    reg3 = 0
    while (reg3 < 128):
        reg1[reg3] = reg1[reg3] ^ (reg6[reg3 + 256] & 1)
        reg3 += 1

    reg7 = []
    reg3 = 0
    reg1 = "".join([str(v) for v in reg1])
    while (reg3 < len(reg1)):
        reg9 = reg1[reg3:reg3+4]
        reg7.append(reg9);
        reg3 += 4;

    return ("".join( [ str(dec2hex(int(v,2))) for v in reg7] )).lower()

